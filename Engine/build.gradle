buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
import proguard.gradle.ProGuardTask
apply plugin: 'com.android.application'

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile(name: 'crosswalk-19.49.514.0', ext: 'aar')
}

android {
    compileSdkVersion 22
    buildToolsVersion '23.0.2'
    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        applicationId 'org.zywx.uex'
        minSdkVersion 14
        targetSdkVersion 14 //
    }
    productFlavors {
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFile 'proguard.pro'
        }
        release {
            minifyEnabled false
            proguardFile 'proguard.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
}

//排除buildConfig,这里的路径应该设置与包名一致
def buildConfigPath = "org/zywx/wbpalmstar/widgetone/uex/"

def jarBaseName="AppCanEngine_un_proguard"

task clearJar(type: Delete) {
    delete 'build/outputs/jar/'+jarBaseName
}

task makeJar(type:Jar, dependsOn: ['compileReleaseJavaWithJavac']) {
    //指定生成的jar名
    baseName jarBaseName
    //从哪里打包class文件
    from('build/intermediates/classes/release/')
    //打包到jar后的目录结构
    into('')
    destinationDir = file('build/outputs/jar')
    exclude('**/R.class')
    exclude('**/R\$*.class')
    exclude('**/BuildConfig.class')
    exclude(buildConfigPath)
}


makeJar.dependsOn(clearJar)

def androidSDKDir = plugins.getPlugin('com.android.application').sdkHandler.getSdkFolder()
def androidJarDir = androidSDKDir.toString() + '/platforms/' + "${android.compileSdkVersion}" + '/android.jar'

task proguardEngineJar(type: ProGuardTask, dependsOn: ['makeJar']) {
    injars('build/outputs/jar/AppCanEngine_un_proguard.jar')
    outjars('build/outputs/jar/AppCanEngine.jar')
    libraryjars(androidJarDir)
    libraryjars('libs/crosswalk-19.49.514.0.aar')
    configuration 'proguard.pro'
}